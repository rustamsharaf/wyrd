import express from 'express';
import http from 'http';
import dotenv from 'dotenv';
import cors from 'cors';
import cookieParser from 'cookie-parser';
import { initSocket } from './src/socket.js';
import connectDB from './src/config/db.js';
import authRoutes from './src/routes/authRoutes.js';
import gameRoutes from './src/routes/gameRoutes.js';
import adminRoutes from './src/routes/adminRoutes.js';
import { startLeaderboardUpdates } from './src/services/leaderboardService.js';
import errorHandler from './src/middleware/errorHandler.js';
import logger from './src/logger.js';

dotenv.config();

const app = express();
const server = http.createServer(app);
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors({
  origin: process.env.CLIENT_URL,
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  credentials: true
}));
app.use(express.json());
app.use(cookieParser());

// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä –≤ –∑–∞–ø—Ä–æ—Å—ã
app.use((req, res, next) => {
  req.logger = logger;
  next();
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
connectDB();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Socket.io
initSocket(server);

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/game', gameRoutes);
app.use('/api/admin', adminRoutes);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use(errorHandler);

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, () => {
  logger.info(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
  startLeaderboardUpdates();
  
  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  if (process.env.ENABLE_GAME_LOOP === 'true') {
    import('./src/services/gameLoopService.js')
      .then(module => {
        module.startGameLoop();
        logger.info('–ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω');
      })
      .catch(err => logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞:', err));
  }
});