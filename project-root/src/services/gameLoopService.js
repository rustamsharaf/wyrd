import calculationService from './calculationService.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–∞–π–º–∏–Ω–≥–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
const config = {
  BETTING_PHASE: 35000,     // 35 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å—Ç–∞–≤–∫–∏ (30-40 —Å–µ–∫)
  RESULT_PHASE: 10000,       // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
  BREAK_PHASE: 17500,        // 17.5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ—Ä—ã–≤ (15-20 —Å–µ–∫)
  TOTAL_ROUND_TIME: 62500    // –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞—É–Ω–¥–∞ (60 —Å–µ–∫)
};

let currentRound = null;
let isBettingActive = false;
let gameInterval = null;
let roundCounter = 0;

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function startGameLoop() {
  console.log('üîÑ –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω');
  runNewRound();
  
  gameInterval = setInterval(() => {
    runNewRound();
  }, config.TOTAL_ROUND_TIME);
}

function stopGameLoop() {
  clearInterval(gameInterval);
  console.log('‚èπÔ∏è –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

function runNewRound() {
  roundCounter++;
  currentRound = {
    id: `round-${Date.now()}-${roundCounter}`,
    startTime: new Date(),
    status: 'betting'
  };
  
  console.log(`üÜï –†–∞—É–Ω–¥ ${currentRound.id} –Ω–∞—á–∞—Ç`);
  isBettingActive = true;
  
  // –§–∞–∑–∞ –ø—Ä–∏–µ–º–∞ —Å—Ç–∞–≤–æ–∫
  setTimeout(() => {
    isBettingActive = false;
    console.log('‚õî –ü—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    // –§–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    setTimeout(() => {
      const winningBall = selectWinningBall();
      console.log(`üé± –í—ã–∏–≥—Ä—ã—à–Ω—ã–π —à–∞—Ä: ${winningBall}`);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      calculationService.calculateResults(currentRound.id, winningBall);
      
      // –§–∞–∑–∞ –ø–µ—Ä–µ—Ä—ã–≤–∞
      setTimeout(() => {
        console.log('‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º');
      }, config.RESULT_PHASE);
    }, 100);
  }, config.BETTING_PHASE);
}

function selectWinningBall() {
  const random = Math.random();
  if (random < 0.05) {  // 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å joker
    return 'joker';
  }
  return Math.floor(Math.random() * 10); // –ß–∏—Å–ª–∞ 0-9
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
function updateConfig(newConfig) {
  Object.assign(config, newConfig);
  console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', config);
  
  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  stopGameLoop();
  startGameLoop();
}

export default {
  startGameLoop,
  stopGameLoop,
  updateConfig,
  getCurrentStatus: () => ({
    isBettingActive,
    currentRound,
    timeLeft: getTimeLeft()
  })
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è UI
function getTimeLeft() {
  if (!currentRound) return 0;
  const elapsed = Date.now() - currentRound.startTime;
  
  if (elapsed < config.BETTING_PHASE) {
    return Math.round((config.BETTING_PHASE - elapsed) / 1000);
  } 
  if (elapsed < config.BETTING_PHASE + config.RESULT_PHASE) {
    return 0; // –°—Ç–∞–≤–∫–∏ –∑–∞–∫—Ä—ã—Ç—ã
  }
  return Math.round((config.TOTAL_ROUND_TIME - elapsed) / 1000);
}