const calculationService = require('./calculationService');
const { io } = require('../socket');   // –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ–∑–∂–µ

const config = {
  BETTING_PHASE: 35_000,
  RESULT_PHASE:  10_000,
  BREAK_PHASE:   17_500,
  TOTAL_ROUND_TIME: 62_500,
};

let currentRound   = null;
let isBettingActive = false;
let gameInterval   = null;
let roundCounter   = 0;

function selectWinningBall() {
  return Math.random() < 0.05 ? 'joker' : String(Math.floor(Math.random() * 10));
}

function startGameLoop() {
  console.log('üîÑ –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω');
  runNewRound();
  gameInterval = setInterval(runNewRound, config.TOTAL_ROUND_TIME);
}

function stopGameLoop() {
  clearInterval(gameInterval);
  console.log('‚èπÔ∏è –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

function runNewRound() {
  roundCounter++;
  currentRound = {
    id: `round-${Date.now()}-${roundCounter}`,
    startTime: new Date(),
    status: 'betting',
  };
  console.log(`üÜï –†–∞—É–Ω–¥ ${currentRound.id} –Ω–∞—á–∞—Ç`);
  isBettingActive = true;

  setTimeout(() => {
    isBettingActive = false;
    console.log('‚õî –ü—Ä–∏–µ–º —Å—Ç–∞–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω');

    setTimeout(() => {
      const winningBall = selectWinningBall();
      console.log(`üé± –í—ã–∏–≥—Ä—ã—à–Ω—ã–π —à–∞—Ä: ${winningBall}`);
      calculationService.calculateResults(currentRound.id, winningBall);

      setTimeout(() => {
        console.log('‚è∏Ô∏è –ü–µ—Ä–µ—Ä—ã–≤ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ä–∞—É–Ω–¥–æ–º');
      }, config.RESULT_PHASE);
    }, 100);
  }, config.BETTING_PHASE);
}

function updateConfig(newConfig) {
  Object.assign(config, newConfig);
  console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', config);
  stopGameLoop();
  startGameLoop();
}

function getTimeLeft() {
  if (!currentRound) return 0;
  const elapsed = Date.now() - currentRound.startTime;

  if (elapsed < config.BETTING_PHASE) {
    return Math.round((config.BETTING_PHASE - elapsed) / 1000);
  }
  if (elapsed < config.BETTING_PHASE + config.RESULT_PHASE) {
    return 0;
  }
  return Math.round((config.TOTAL_ROUND_TIME - elapsed) / 1000);
}

module.exports = {
  startGameLoop,
  stopGameLoop,
  updateConfig,
  getCurrentStatus: () => ({
    isBettingActive,
    currentRound,
    timeLeft: getTimeLeft(),
  }),
};